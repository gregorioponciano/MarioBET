import { ref, withDirectives, openBlock, createElementBlock, normalizeStyle, unref, Fragment, createElementVNode, normalizeClass, vShow, pushScopeId, popScopeId, createApp } from 'vue';

const _withScopeId = n => (pushScopeId("data-v-2fc41247"), n = n(), popScopeId(), n);

const _hoisted_1 = ["innerHTML"];

const _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/createElementVNode("span", {
  class: "sr-only"
}, "Loading...", -1));
var script = {
  setup(__props, _ref) {
    let {
      expose
    } = _ref;
    let isLoading = ref(false);
    let options = ref({
      bg: "#41b883ad",
      icon: null,
      size: "3",
      icon_color: "#ffffff",
      slot: null
    });

    const changeStatus = payload => {
      isLoading.value = payload;
    };

    const changeIsLoadingOptions = newOptions => {
      Object.keys(options.value).forEach(key => {
        if (newOptions[key]) {
          options['value'][key] = newOptions[key];
        }
      });
    };

    expose({
      changeStatus,
      changeIsLoadingOptions
    });
    return (_ctx, _cache) => {
      return withDirectives((openBlock(), createElementBlock("div", {
        class: "loading",
        style: normalizeStyle(`background-color: ${unref(options).bg};`),
        ref: "loading"
      }, [unref(options).slot ? (openBlock(), createElementBlock("div", {
        key: 0,
        innerHTML: unref(options).slot
      }, null, 8, _hoisted_1)) : (openBlock(), createElementBlock(Fragment, {
        key: 1
      }, [createElementVNode("i", {
        class: normalizeClass(["fa-spin", `${unref(options).icon} fa-${unref(options).size}x`]),
        style: normalizeStyle(`color: ${unref(options).icon_color}`)
      }, null, 6), _hoisted_2], 64))], 4)), [[vShow, unref(isLoading)]]);
    };
  }

};

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css_248z = "\n.loading[data-v-2fc41247] {\n  position: fixed;\n  left: 0;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  height: 100vh;\n  z-index: 99999 !important;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n}\n.loading i[data-v-2fc41247] {\n  position: absolute;\n  opacity: 1;\n}\n";
styleInject(css_248z);

script.__scopeId = "data-v-2fc41247";

var entry_esm = {
  install: (app, options) => {
    const loadingUI = createApp(script);
    const vm = loadingUI.mount(document.createElement('div'));
    document.body.appendChild(vm.$el);
    const {
      changeStatus,
      changeIsLoadingOptions
    } = vm;

    app.config.globalProperties.$isLoading = isLoading => changeStatus(isLoading);

    app.config.globalProperties.$changeIsLoadingOptions = newOptions => changeIsLoadingOptions(newOptions);

    if (options) {
      changeIsLoadingOptions(options);
    }

    app.provide('changeStatus', changeStatus);
    app.provide('changeIsLoadingOptions', changeIsLoadingOptions);
  }
};

export { entry_esm as default };
